# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 24
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build -x check -x test

    - name: Run code quality checks
      run: ./gradlew check -x test

    - name: Run tests
      run: ./gradlew test

    - name: Start Docker services
      run: docker compose -f docker-compose.yml up -d

    - name: Start Application
      run: nohup ./gradlew bootRun > bootRun.log 2>&1 &

    - name: Wait for application to be ready
      run: |
        timeout=60
        while ! curl -s http://localhost:8080/health > /dev/null; do
          if [ $timeout -le 0 ]; then
            echo "Application failed to start"
            exit 1
          fi
          echo "Waiting for application to start..."
          timeout=$((timeout-1))
          sleep 1
        done

    - name: Run Integration Tests
      run: ./gradlew integration:integrationTest

    - name: Stop Application and Docker
      if: always()
      run: |
        pkill -f 'java.*bootRun' || true
        docker compose -f docker-compose.yml down